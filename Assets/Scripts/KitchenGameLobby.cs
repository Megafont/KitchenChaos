using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;

using Unity.Netcode;
using Unity.Netcode.Transports.UTP;
using Unity.Networking.Transport.Relay;
using Unity.Services.Authentication;
using Unity.Services.Core;
using Unity.Services.Lobbies;
using Unity.Services.Lobbies.Models;
using Unity.Services.Relay;
using Unity.Services.Relay.Models;
using UnityEngine;
using UnityEngine.SceneManagement;
using Random = UnityEngine.Random;


public class KitchenGameLobby : MonoBehaviour
{
    private const string KEY_RELAY_JOIN_CODE = "RelayJoinCode";


    public static KitchenGameLobby Instance { get; private set; }


    public event EventHandler OnCreateLobbyStarted;
    public event EventHandler OnCreateLobbyFailed;
    public event EventHandler OnJoinStarted;
    public event EventHandler OnJoinFailed;
    public event EventHandler OnQuickJoinFailed;

    public event EventHandler<OnLobbyListChangedEventArgs> OnLobbyListChanged;
    public class OnLobbyListChangedEventArgs : EventArgs
    {
        public List<Lobby> LobbyList;
    }


    private Lobby _JoinedLobby;
    private float _HeartbeatTimer;
    private float _HeartbeatTimerMax = 15f;
    private float _LobbyListUpdatesTimer;
    private float _LobbyListUpdatesTimerMax = 3f;



    private void Awake()
    {
        Instance = this;

        DontDestroyOnLoad(gameObject);

        InitializeUnityAuthentication();
    }

    private void Update()
    {
        HandleHeartbeat();
        HandlePeriodicLobbiesListUpdates();
    }

    private async void InitializeUnityAuthentication()
    {
        // Initialize UnityServices if necessary.
        // This prevents us from trying to do it again after the player has returned
        // to the main menu and then tried to go in-game again, which would cause an error.
        if (UnityServices.State != ServicesInitializationState.Initialized)
        {
            InitializationOptions initializationOptions = new InitializationOptions();

            // Create a random profile name. We are generating random profiles, because
            // otherwise we can't test with multiple builds running on the same PC,
            // as they would have the same player ID then (which is generated by the
            // AuthenticationService).
            initializationOptions.SetProfile(Random.Range(0, 10001).ToString());

            await UnityServices.InitializeAsync();

            // This line is only necessary for test builds of the game.
            // WARNING: It MUST be commented out or removed in final builds of the game, or players will lose their account information every time.
            // Basically, this forces it to create a new login credential, ensuring that each instance of your test build of the game has its own
            // unique login credentials. Otherwise, the client log will have an error with an exception rethrown saying the player is already a
            // member of the lobby it tried to join.
            //AuthenticationService.Instance.ClearSessionToken();

            await AuthenticationService.Instance.SignInAnonymouslyAsync();
        }
    }

    private void HandleHeartbeat()
    {
        if (IsLobbyHost())
        {

            _HeartbeatTimer -= Time.deltaTime;
            if (_HeartbeatTimer < 0)
            {
                _HeartbeatTimer = _HeartbeatTimerMax;
                LobbyService.Instance.SendHeartbeatPingAsync(_JoinedLobby.Id);
            }
        }
    }

    private void HandlePeriodicLobbiesListUpdates()
    {
        if (_JoinedLobby == null && AuthenticationService.Instance.IsSignedIn &&
            SceneManager.GetActiveScene().name == Loader.Scenes.LobbyScene.ToString())
        {
            _LobbyListUpdatesTimer -= Time.deltaTime;
            if (_LobbyListUpdatesTimer <= 0)
            {
                _LobbyListUpdatesTimer = _LobbyListUpdatesTimerMax;

                GetLobbiesList();
            }
        }
    }

    private bool IsLobbyHost()
    {
        return _JoinedLobby != null && _JoinedLobby.HostId == AuthenticationService.Instance.PlayerId;
    }

    private async void GetLobbiesList()
    {
        try
        {
            QueryLobbiesOptions queryLobbiesOptions = new QueryLobbiesOptions
            {
                Filters = new List<QueryFilter>
                {
                    // This filter only accepts lobbies with at least one open player slot left.
                    new QueryFilter(QueryFilter.FieldOptions.AvailableSlots, "0", QueryFilter.OpOptions.GT),
                }
            };


            QueryResponse queryResponse = await LobbyService.Instance.QueryLobbiesAsync(queryLobbiesOptions);

            OnLobbyListChanged?.Invoke(this, new OnLobbyListChangedEventArgs
            {
                LobbyList = queryResponse.Results,
            });
        }
        catch (LobbyServiceException e)
        {
            Debug.LogException(e);
        }
    }

    /// <summary>
    /// Setup the Unity Relay service.
    /// </summary>
    private async Task<Allocation> AllocateRelay()
    {
        try
        {
            // The -1 here is because it expects the number of players not including the host,
            // since the host does not need to connect to itself!
            Allocation allocation = await RelayService.Instance.CreateAllocationAsync(KitchenGameMultiplayer.MAX_PLAYERS_AMOUNT - 1);

            return allocation;
        }
        catch (RelayServiceException e)
        {
            Debug.LogException(e);

            return default;
        }
    }

    private async Task<string> GetRelayJoinCode(Allocation allocation)
    {
        try
        {
            string relayJoinCode = await RelayService.Instance.GetJoinCodeAsync(allocation.AllocationId);

            return relayJoinCode;
        }
        catch (RelayServiceException e)
        {
            Debug.LogException(e);

            return default;
        }
    }

    private async Task<JoinAllocation> JoinRelay(string relayJoinCode)
    {
        try
        {
            JoinAllocation joinAllocation = await RelayService.Instance.JoinAllocationAsync(relayJoinCode);

            return joinAllocation;
        }
        catch (RelayServiceException e)
        {
            Debug.LogException(e);

            return default;
        }
    }

    public async void CreateLobby(string lobbyName, bool isPrivate)
    {
        OnCreateLobbyStarted?.Invoke(this, EventArgs.Empty);

        try
        {
            _JoinedLobby = await LobbyService.Instance.CreateLobbyAsync(lobbyName, KitchenGameMultiplayer.MAX_PLAYERS_AMOUNT,
                                                                        new CreateLobbyOptions { IsPrivate = isPrivate });

            Allocation allocation = await AllocateRelay();
            string relayJoinCode = await GetRelayJoinCode(allocation);

            await LobbyService.Instance.UpdateLobbyAsync(_JoinedLobby.Id, new UpdateLobbyOptions
            {
                Data = new Dictionary<string, DataObject>
                {
                    { KEY_RELAY_JOIN_CODE, new DataObject(DataObject.VisibilityOptions.Member,  relayJoinCode) },
                }
            });

            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(new RelayServerData(allocation, "dtls"));

            KitchenGameMultiplayer.Instance.StartHost();
            Loader.LoadSceneMultiplayer(Loader.Scenes.CharacterSelectScene);
        }
        catch (LobbyServiceException e)
        {
            Debug.LogException(e);
            OnCreateLobbyFailed?.Invoke(this, EventArgs.Empty);
        }
    }

    public async void QuickJoin()
    {
        OnJoinStarted?.Invoke(this, EventArgs.Empty);

        try
        {
            _JoinedLobby = await LobbyService.Instance.QuickJoinLobbyAsync();

            string relayJoinCode = _JoinedLobby.Data[KEY_RELAY_JOIN_CODE].Value;
            JoinAllocation joinAllocation = await JoinRelay(relayJoinCode);

            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(new RelayServerData(joinAllocation, "dtls"));

            KitchenGameMultiplayer.Instance.StartClient();
        }
        catch (LobbyServiceException e)
        {
            Debug.LogException(e);
            OnQuickJoinFailed?.Invoke(this, EventArgs.Empty);
        }
    }

    public async void JoinWithCode(string lobbyCode)
    {
        OnJoinStarted?.Invoke(this, EventArgs.Empty);

        try
        {
            _JoinedLobby = await LobbyService.Instance.JoinLobbyByCodeAsync(lobbyCode);

            string relayJoinCode = _JoinedLobby.Data[KEY_RELAY_JOIN_CODE].Value;
            JoinAllocation joinAllocation = await JoinRelay(relayJoinCode);

            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(new RelayServerData(joinAllocation, "dtls"));

            KitchenGameMultiplayer.Instance.StartClient();
        }
        catch (LobbyServiceException e)
        {
            Debug.LogException(e);
            OnJoinFailed?.Invoke(this, EventArgs.Empty);
        }
    }

    public async void JoinWithId(string lobbyId)
    {
        OnJoinStarted?.Invoke(this, EventArgs.Empty);

        try
        {
            _JoinedLobby = await LobbyService.Instance.JoinLobbyByIdAsync(lobbyId);

            string relayJoinCode = _JoinedLobby.Data[KEY_RELAY_JOIN_CODE].Value;
            JoinAllocation joinAllocation = await JoinRelay(relayJoinCode);

            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(new RelayServerData(joinAllocation, "dtls"));

            KitchenGameMultiplayer.Instance.StartClient();
        }
        catch (LobbyServiceException e)
        {
            Debug.LogException(e);
            OnJoinFailed?.Invoke(this, EventArgs.Empty);
        }
    }

    public async void DeleteLobby()
    {
        if (_JoinedLobby != null)
        {
            try
            {
                await LobbyService.Instance.DeleteLobbyAsync(_JoinedLobby.Id);

                _JoinedLobby = null;
            }
            catch (LobbyServiceException e)
            {
                Debug.LogException(e);
            }
        }
    }

    public async void LeaveLobby()
    {
        if (_JoinedLobby != null)
        {
            if (_JoinedLobby.Players.Count == 1)
            {
                DeleteLobby();
                return;
            }


            try
            {
                await LobbyService.Instance.RemovePlayerAsync(_JoinedLobby.Id, AuthenticationService.Instance.PlayerId);

                _JoinedLobby = null;
            }
            catch (LobbyServiceException e)
            {
                Debug.LogException(e);
            }
        }
    }

    public async void KickPlayer(string playerId)
    {
        if (IsLobbyHost())
        {
            try
            {
                await LobbyService.Instance.RemovePlayerAsync(_JoinedLobby.Id, playerId);
            }
            catch (LobbyServiceException e)
            {
                Debug.LogException(e);
            }
        }
    }

    public Lobby GetLobby()
    {
        return _JoinedLobby;            
    }
}
